[{"categories":["team","engineering"],"content":"在如今專業化分工逐漸成熟的軟體業中，編制與招募依照職能劃分已是司空見慣，而某些團隊中可能為了消化較多樣的業務，也有培養成員成為不同領域專家 (Domain Expert) 的文化。能夠盡可能提高研發角色的工作內容的同質性，提高效率的同時有助於專業累積固然是好事，但同時也會讓知識落差的問題更加明顯。\n合作中實際上會阻礙進度的有八成以上並不是些演算法、Linux 指令、package 用法等等，上網查能查到或是看同事的 source code 就能懂的東西，而是像 payload 欄位意義、magic number、有等於沒有的 error message 之類的，原作者不解釋我還真通靈不出來的情況。\n這也讓我對於知識落差造成的困擾有很深的體悟，間接影響我後續成為團隊中相對願意主動改善 README，也堅持讓所有介面設計符合 best practice 的角色。\n隨著待過的團隊變多，我個人大致把企業文化在這些問題上的表現分布在光譜上，一端是把責任放在「知識的需求者」身上，另一端則是期望「知識的持有者」負擔更多的責任。長話短說，我個人更為偏好後者的風格。\n在一個由「知識的需求者」承擔更多責任的文化中可能會遇到這些情況：\nREADME 完全空白，因此不熟的人有疑問可能需要花費數十分鐘至數小時研究 source code 由於不清楚 request body 必要欄位有哪些，只好在測試環境不斷 try and error 數次至數十次，有時候甚至會不小心把系統弄壞 只收到了 400 的 http status 但沒有 error message，只好找維護者幫忙查 log，在對方回覆原因之前完全無法推動進度 在一個由「知識的持有者」承擔更多責任的文化中可能會遇到這些情況：\n需要對 slack 訊息積極回覆，不容易維持高品質的 focus time 研發團隊需要有額外心思持續更新文件並讓它易於理解 為了最大程度地遵循 best practice 而需要更多辯論與重構的時間，無法適應快節奏的時程，在招募上也需要留意人選價值觀是否合適 以一個個人貢獻者的角度來看，傾向前者的文化無非會直接在新人入職前幾週就給予極大的折磨，長期而言對峙是外部化會構成明顯阻礙，導致評估是否重複利用其他 team 現成系統功能有所顧慮，每當有資深成員要離職交接時也會有段陣痛期。\n偏向後者的文化雖然可預期的需要付出些生產力上的成本，但是和價值觀相符的緣故因此讓我的接受度較高。然而回到現實面來說，仍是這些知識落差造成的問題難以量化，也鮮少有軟體企業落實將其他下游 peer teams 合作效率和感受納入績效評核的緣故。\n","description":"","tags":[],"title":"軟體工程團隊的知識落差","uri":"/posts/bridging_the_knowledge_gap/"},{"categories":["career"],"content":"如果你不是那萬中選一熱愛工作的優質員工的話，我相信我們或多或少，都曾經或著即將會與職業倦怠有些交集。即使在不同國家、不同職業、不同年資之間有樣本數或形式上的落差，也沒有必要因此被刻板印象定義自己的狀態。\n統計數字終究只是有助於旁觀者理解而已，遠不如多花點心思了解自己來得實際，即使我是唯一一個做軟體工程師做到職厭倦怠的人，我仍會想找個機會談談這段經驗。\n當時並沒有預先感覺到什麼明顯的徵兆讓我能先行處理這問題，基本上是已經陷入職業倦怠的狀態，才後知後覺的意識到需要應對一下。值得慶幸的是過於理性的思考方式依舊穩定運作著，有條有理的把自己搞定後，還能將當時虛無飄渺的情緒與感受轉化成這些具體文字。\n我曾經以為自己對軟體工程的熱忱根本不會有職業倦怠的問題，但我很快地發現那跟工作完全是兩碼子事。更準確一點的來說，是我深刻體會到「是不是優秀的軟體工程師」和「會不會職業倦怠」兩者間沒什麼關聯。\n這就先來談談職業倦怠的原因好了，網路上能查到很多，但我只會談談我自己的：\n優秀的軟體工程師不會職業倦怠 在高手雲集的同溫層裡距離優秀可說是遙遙無期，但至少我有個明確的方向持續努力著，而不要被職業倦怠扯後腿就是其中之一，現在回頭看這真是個坑自己的爛主意。\n即使再怎麼糟糕的情境，我仍會盡可能使用合理的設計，交付品質至少能讓自己接受的程式碼，持續輸出知識提高整體技術水平。這些一個不漏的做起來說真的勞心費神，沒有時間能浪費在職業倦怠上。\n這就是當時當時的賭局，究竟是我先成為理想中「優秀的軟體工程師」然後將一切應付得得心應手，還是先沉入職業倦怠的泥沼中，被迫認清事實著手處理這個狀況。\n結果明顯是後者。前者以我對自己的要求在當時的環境待個十年也無法達到，即使成了也不可能如我所願得心應手，因為有許多關鍵的外部因素不會因此而消失。\n原本以為職業倦怠只是自己的個人問題，但顯然不是。\n企業文化與價值觀的不相容 職業倦怠成因中那些與工作環境或內容有關的，雖然有些歸因於產業性質，但八成都和企業文化有所關聯。從程式碼變數命名規則這種灰塵般的小議題，大到加班時數有沒有違反勞基法這種紅線，處處都清晰的反映著。\n無所不在的企業文化我一直都有所察覺，但也僅止於察覺，然後講些自嘲的工程師笑話和茶餘飯後的八卦消遣而已，頂多我抱怨的頻率比平均值高了點。\n除此之外我並沒有，確切來說是沒有想到可以，特別有目的性的去掙扎什麼。就如同在荒野中遇到暴雨，我知道被淋濕很糟，但也沒得躲，跑起來也不會淋比較少，多遇到幾次久了就習以為常了。\n大概是這個時期，企業文化不相容對我而言更像一種天災，我沒能力抗衡它。這種束手無策的無力感隨著天災的發生次數快速累積，日復一日，難以消散。\n一直到我已經用其他方式解決問題後，我才驚覺這方向可能有令人耳目一新的答案，開始動腦追溯根源。而我得出的結論是：有些東西無法改變是因為有其他人覺得這麼做相當合理，要改變文化需要先改變關鍵的人。\n以工作量規劃為例，有些團隊將留有餘裕視為常態，若沒有應付緊急需求則由成員自行提案。有些公司將工作量塞滿作為常態，僅有在連假時才會進行減量，若遭遇緊急需求仍需要調度人力解決。\n當然，職業倦怠並不是什麼絕症，至少在我身上不是。然而這需要的絕對不是精神雞湯，而是在釐清原因後用對應的方法根治。\n軟體工程師是份工作 在我把自己的個人定位和軟題工程師的職位完全剝離後，精神負擔可說是如釋重負。它不過就是份工作而已，沒有必要把自己對於軟體工程的堅持或憧憬全然投射在上面。\n我們可以是個十分擅長效能最佳化的工程師，但沒有必要在工作中無時無刻做到這一點，你甚至不需要讓同事知道，避免承受額外的期待。\n也許是服兵役時體悟到的心得，既然躲不掉不如抽離所有情緒與價值觀，就當那段時間昏迷了一樣。一週約莫就四十小時，放下執著隨和地應付，剩下的時間和精神都是自己的。\n當然這也不是在慫恿人扔了技術背景的堅持，而是強調工作本質是利益交換，審時度勢理性投入。把自己的整套價值觀給搭進去，很容易把無力感反向傳遞回自己身上，形成「職場不順 == 職涯不順 == 人生不順」的僵局，迅速導致職業倦怠。\n軟體工程並非一定得和工作綁死，規律性的閱讀和寫作對我來說就是一大樂趣，下班後的職涯對許多人來說相當陌生，但也因此才有更多的可能性值得探索。\n改變自己的工作內容 最初我完全沒有朝著這個方向思考過，一直以為工作內容就固定是 job description 上寫的那些，我頂多只能多拿幾個 offer，在它們之中選個喜歡的而已。\n一天超過 6 小時在寫 code 對我來說是種折磨，光想像這種日子未來還要持續個一兩年就足以觸發我的職業倦怠，但其實目前痛苦並不代表未來都將如此。\n隨著對工作事務的上手，我很快便有了些時間上的餘裕能夠深入研究些感興趣的技術、跑一些實驗、甚至多管閒事的去推動些沒被要求但我覺得值得一試的改善計畫。\n對工作的興趣似乎因此而有些復燃的跡象，加上有前輩明確地和我討論調整工作內容的可能性，也有同儕分享類似的經驗，我才有意識地將這作為向上管理的其中一個目標。\n即使經歷了工作轉換，這個方法仍然給了我自己不少幫助。寫程式的時間降低至平均每日 2 至 4 小時左右，對我來說是個舒適的範圍，但可能也和我對程式語言的熟悉度提升有關。\n取而代之的是多瀏覽一些技術方面的設計提案，並協調工具整合來改善流程中的痛點，這對我更有吸引力的多，當然也少不了自行研究的部分，而最終知識也將被應用在公司產品上。\n預防遠勝於治療 當然，如果能在入職之前事先知道自己會不會快速感到倦怠，那應該是在好不過了。\n為此我盡可能明確的整理出感到無力的因素，並且有技巧地確認對方團隊中是否存在類似的問題。下面列出了幾項，也許能讓你有些共鳴：\n不願意投入資源進行自動化，維持勞力密集作業 將超額的工作量作為常態，完全不當它是問題 職等或薪酬受到硬性限制，比如學歷、年資或性別 然而這些資訊往往會影響到企業品牌形象，對方不一定會據實以告或是被要求以官方說法回應，執著追問可能也有損印象分數，我個人習慣是用一些旁敲側擊的方式確認。\n比如半開玩笑的提一下過去工作經驗中的慘況消遣自己，觀察對方有沒有露出「真的假的這裡也差不多欸！」的表情，或是管不住嘴直接真情流露的把一切都招了。\n具體上也可以藉由請教「部署新版本的流程」來試探自動化程度，以及用「想認識喜歡旅遊的同事」開話題，試探連假是否會被凹加班，以及請長假是否會被刁難。\n要記住獲得資訊才是首要目的，各式話題與閒聊氛圍都只是手段，要圍繞著目的去設計與開展。\n寫到這裡，大致上談了上一次職業倦怠的種種感受與經驗，以整個職涯來看其實是在相對初期的時候，比大多數案例提早了不少。\n主因應是對於工作環境有不合理的期待，又沒有足夠的能力與經驗立即做出改變。所幸情況不嚴重，在尚未深陷其中時就採取行動脫身，如今能一邊回憶整理思緒一邊淬煉文字將其更好地表達出來，十分值得作為成功克服的紀念。\n","description":"","tags":[],"title":"職業倦怠應對策略","uri":"/posts/dealing_with_job_burnout/"},{"categories":["engineering"],"content":"Tech debt can be considered one of the most significant cognitive gaps between eng roles and others within software companies, and it often becomes a major obstacle in project communication and execution.\nOne major reason for the difficulty in reaching consensus among different roles is its abstract nature. Therefore, we need clear metrics to attach more concrete meanings to statements like “taking too long,” “difficult to implement,” “unstable,” and so on.\nFor example, “In the product introduction, stating that data analysis functionality can be completed within 2 hours, but 30% of customers receive reports after more than 4 hours. Additionally, this quarter has seen 10 complaints from key customers, each requiring a senior engineer to spend two days to resolve.”\nThis kind of communication approach can effectively and concretely reflect the severity of the problems.\nUnfortunately, this scenario is overly ideal, and obtaining such clear metrics undoubtedly requires both foresight and a solid infrastructure.\nFor most teams, their daily work is more akin to dealing with a proliferation of bugs everywhere, leaving little mental capacity to consider what metrics they need and how to calculate them.\nAs a first step, which is both low-cost and easy to try, is to spend a few extra hours studying the third-party tools or services at hand to see if they have any useful features.\nFor example, adding a specific tag to Jira tickets caused by a technical debt-related complaint. By doing this, you can easily query and determine how many issues were caused, then calculate the time spent on opening and closing tickets to estimate the amount of engineering effort it consumed.\nThis is obviously not a simple matter that can be solved with just a few words. If it were that easy, there wouldn’t be so many software engineers feeling frustrated by technical debt.\nHowever, besides hoping to land in a team that values software quality, using a mindset of technical management to escalate the problem is also an approach worth trying.\n","description":"","tags":[],"title":"Escalating the Technical Debt","uri":"/posts/escalate-the-tech-debt/"},{"categories":["negotiation"],"content":"Conflict is an almost inevitable problem in one’s career. It often ended up feeling embarrassed or chose to keep the grievances to ourselves when dealing with it the first few time. However, looking back now, those seemingly catastrophic dilemmas did not necessarily end in tragedy.\nAfter practicing ‘Collaborative Negotiation’ in various scenarios such as interviews, project scheduling, and problem clarification over the past few years, I have fugured out an approach for myself that is both emotionally acceptable and delivers mostly favorable outcomes.\nHere are some relatively specific and practical skills to share:\nRather than directly opposing issues, focus on and gradually expand areas of common ground While it is natural to invest energy in issues that one cares about, it can be challenging to make progress when directly opposing the other side. In situations where obstacles seem insurmountable, considering alternative routes can also be an option.\nFor instance, when discussing a project with a tight schedule, proposing a delay in the delivery time can encounter great resistance. However, there might be a shared understanding that the situation must be mitigated on time.\nBased on this unspoken agreement, the focus can be shifted to other aspects such as delivery quality or scale instead of just the schedule.\nRaise the level of discussion by continuously tracing back to the root of the problem Negotiations that are difficult to progress may be due to strict constraints within the framework. For example, the conversation can become stuck in a tug of war over the specific number after being asked about the current or expected basic salary.\nWhile the basic salary is undoubtedly significant, it is only one aspect of the compensation package, and the current package structure is just one piece of information disclosed during the recruitment process. Therefore, it might be beneficial to elevate the discussion by delving into the whole compensation package structure or even the entire recruitment policy.\nThe core issue should be focused on making the recruitment process successful, rather than merely convincing the candidate to accept a specific number mentioned in a half-hour video call.\nWhat other action can be took to make the recruitment successful, considering the current policies and procedures? This might involve offering sign-on bonuses, additional PTO, submitting recommendation letters from former managers, or professional certificates for re-evaluation.\nBy elevating the discussion and reframing the problem, there may be opportunities to discover new possibilities for collaboration.\nClarify the goals and limitations of both sides and collaborate to find a solution Breaking the deadlock can also be achieved by sincerely asking the other side about their current considerations or limitations. This can help establish a shared perspective and clarify the goals of both sides. By engaging in candid communication, you can work together towards finding a mutually beneficial solution.\nMost of the time, nothing will be changed whether we choose to be transparent or withhold information. However, a desirable outcome can be achieved by exchanging ideas and arriving at a feasible solution.\nThe inclination to withhold information is primarily a matter of perception, but with enough work experience, many things become common knowledge, and we may even laugh it off if we choose to be transparent.\nUntangling the underlying logic of restrictions during negotiations and searching for details that provide a turning point or a reason for making an exception can be worthwhile and may lead to finding a solution that was not initially apparent.\nInvite the other side to participate in “Collaborative Negotiation” I personally think that one of the core concepts of “cooperative negotiation” is to share information. If both parties are willing to invest, it can save a lot of mental costs of being suspicious, and there is a considerable improvement in the efficiency of progress.\nThe last technique I want to share is to demonstrate the efficiency and results to the other side, encourage them to share more information, and work together towards achieving common goals.\nBy doing so, you can foster a sense of cooperation and establish a shared perspective, leading to a more successful negotiation outcome.\n","description":"","tags":[],"title":"Collaborative Negotiation","uri":"/posts/collaborative_negotiation/"},{"categories":["engineering"],"content":"Today, in many business models, product or service stability is an essential element and often the key factor in determining customer retention and company revenue.\nOn-call rotation is a widely used and proven practice, but it is also a major contributor to the erosion of work-life balance. While it may seem like a necessary decision, there are many details that should be considered, as cultural differences can often leave a lasting impact.\nThis series of articles will cover several interesting topics. These topics are not only indicators used by myself to evaluate the engineering culture of other teams during interviews, but also ways to drive progress within each team when I have greater impact in future careers.\nHow companies Treat On Call Rotation The management’s stance on an issue can be considered the starting point for everything. It determines the allocation of resources and the level of humanization in the system and processes.\nWhile software products cannot be perfect and accidents may occur after going online, this does not mean that having engineers on-call is a one-time solution. Turning a blind eye to problems after implementing an on-call system is the worst strategy.\nHowever, these are abstract concepts that can be challenging to make progress on when raised within an organization. Additionally, the other party may whitewash such sensitive issues during an interview. To provide more concrete examples, I have outlined a few specific issues below for reference.\nSupporting measures such as shift scheduling mechanism, SOP, accident classification, etc. These various supporting measures exist to make on-call rotations more efficient and humane. I have personally experienced a significant difference early in their career based on the presence of such measures, and has since placed great importance on this aspect of the culture.\nFor example, when national holidays is coming and no one is willing to be on-call, there are specific issues to consider such as whether there is a maintenance SOP document to follow or if an accident requires immediate attention. These factors have a significant impact on daily work.\nThese measures reveal whether a company is willing to invest resources to alleviate the pressure on frontline personnel and minimize the frequency of disrupting employees during non-working hours.\nTrying to prevent the same problem from happening again and again. No one wants to be called back to work during non-working hours. However, if an incident occurs that affects someone’s life, efforts should be made to prevent it from happening again in the future.\nWhile not all problems can be fundamentally solved, many can be mitigated through techniques such as automatic retry when encountering errors in network requests or implementing new technologies that allow for failover.\nIf a large number of problems continue to occur without mitigation, it may indicate that On Call is being used as a long-term solution rather than a short-term emergency measure. This can lead to increased pressure on the team.\nWillingness to compensate those affected Compensation means recognizing the impact on an employee’s life caused by On Call responsibilities and being willing to communicate constructively. Having corresponding compensation rules is a positive signal, especially when compared to organizations that believe engineers should solely be responsible for the normal operation of the system.\nThe most common compensation methods are compensatory time off and overtime pay, each with its own advantages and disadvantages depending on the team and individual circumstances.\nFor instance, requesting compensatory leave in a short period of time when the workload is heavy can be difficult, and overtime pay is not advantageous for employees with low basic salaries. The relatively low overtime pay can lead to situations where the normal limit exceeds the legal limit.\nClarifying ambiguities or exceptions to the rules can help to obtain more practical information, reduce information gaps, and align mutual expectations within the organization.\nThis time, we have discussed how the organizational culture reflected in On Call Rotation through some specific questions. This can serve as a reference for evaluating the culture of a new team or promoting improvements in the current organization.\nWhile many companies may not be able to provide a more humane On Call system due to limited resources or the nature of their product, readers are encouraged to think about how to have a constructive discussion after raising concerns. After all, there should always be someone who fights for the opportunity to bring about change.\nThe following articles will take a pragmatic approach to the daily life of software engineering teams. They will analyze the root causes of problems and discuss the harm they can cause to an organization.\n","description":"","tags":[],"title":"A Necessary Evil : On Call Rotation (I)","uri":"/posts/on-call-rotation-01/"}]
