[{"categories":["interview"],"content":" 相信有認真準備過面試的讀者們都對「STAR Method」有所耳聞，在面試過程中的實戰肯定也不少，數十次經驗累積出了許多的心得。今天筆者就來談談自己在面試時採用 STAR Method 的一些體悟，以及針對實戰上覺得不方便的面向採取的應對策略。\nSTAR Method 作為一個針對行為面試問題講故事的框架，STAR Method 主要由四個部分組成：\nSituation（故事的時空背景）\nTask（當下所負責的任務）\nAction（後續採取的行動）\nResult（根據行動最後達成的結果）\n條列式的主題看起來固然整潔，把自己的經歷放進去每個欄位也不難，不過能否在面試時發揮期望的效果就不一定了。\nSTAR Method 的局限性 從一開始的無腦套用，到後來逐漸發現不對勁然後開始調整，筆者應該已經在不下十場面試中實戰過 STAR Method 的策略了，以下就來分享些親身體會到的尷尬之處亦或是局限性：\n敘事導向可能過度發散 畢竟是個講故事的框架，會讓人下意識的想把更多東西交代清楚，舉凡公司所聚焦的產業、團隊的人力與時程當時如何安排、你負責的系統是因為什麼歷史舊業導致這麼荒謬的 legacy 等等的。\n但，這些真的都需要嗎？或這說，釋出了這些琳瑯滿目的資訊真的對你的面試表現有加分嗎？有些有，但有些沒有，而作為 candidate 我們並不知道哪些沒有，唯一能確認的是流水帳肯定是個低 cp 值的呈現方式。\n如果你也是個會為了如何把自己的經歷濃縮在一頁 A4 空間而苦惱的 candidate，你大概也會認同技術面試是個分秒必爭的時刻，60-90 分鐘要有條理的展現自己價值實在不容易，更別說中間還要卡個 Coding Challenge 或 System Design 了，身為 candidate 能決定自己要說什麼的時間可能連三分之一都不到。\n技術面試其中一個關鍵目標是了解一個 candidate 的能力上限，我們能做的只有不斷的提煉高價值資訊以及最佳化流程，一開始就切入 「問題」 的核心講完重點，其他的主管怎麼樣、公司怎麼樣、甚至前同事怎麼樣都不是必要，如果面試官真的在乎的話他也會主動提問。\n過度重視執行面 / 過於被動 對於過去的專案侃侃而談固然重要，但是從什麼樣的視角作為出發點其實會有蠻顯著的差異。\nSTAR Method 中的 Task 環節一直都是我很糾結的一個點，隨著執掌的範疇越大，處理的問題就越抽象，有些時候甚至只是些來自 stakeholders 的抱怨或是老闆的遠大夢想，沒有具體的 Task 可以討論的。\nAction 的部分則是另一個難題，筆者在過去某些專案中僅是負責生出一開始的 proposal 並啟動專案，或是參加某個定期會議給些建議而已，這導致我被問到這些經驗時 Action 這塊我吞吞吐吐的很難怎麼講出有意義的東西，只能不斷打高空。\n對於很多知識工作者來說，「為什麼做這件事」遠比「做了什麼事」還有重要，一個簡單的提議背後可能有許多深層的考量，而這些洞見相較於最後的 Pull Request 有趣多了。\nTask 與 Action 兩個環節很容易讓人受限於執行者的框架內，著眼於如何執行被分配的明確任務以及其細節，不僅在格局上小了不少，也難以傳遞在初期釐清問題時的分析與協調能力。\n這些局限性筆者在許多次被問到能否分享自己 take initiatives 的經驗時都相當棘手，因為從「做了什麼」的角度切入基本上很難談得上「主動」從無到有的推行能力。\n這些真的重要嗎？ 這些小毛病在只是想了解 candidate 有沒有能耐把事情做完的面試中完全無傷大雅，甚至歸咎於 interviewer 個人觀感問題也不為過，不過這些也確實是筆者多次碰壁的原因。在開始挑戰一些海外面試後，筆者深深體認到要在千人以上的巨型工程團隊中拿到 Senior+ 的 Offer 並不只是「展現自己的影響力」這麼一言蔽之。\nPICI Method 那麼該怎麼處理上面提到的問題而已呢？筆者想到的最直接方法就是搭建另一個「以問題為核心」的框架，以此在有限的時間內快速聚焦重點展現影響力。設計框架的目的並不是要限制自己，而是為了幫助自己有條理地呈現內容，由於本身不是英文母語者，沒辦法嘴砲嘴得風聲水起，準備面試時有個框架整理內容還是能省不少力氣～\n這個我覺得蠻好用的框架筆者自己簡稱為 PICI：\nProblem - 問題時空背景的描述\nInsight - 針對問題的洞察與分析\nChallenge - 解決問題時遇到的挑戰\nImpact - 最後帶給產品或團隊的影響\n這個結構屏棄了 STAR Method 中承先啟後的時間線敘事風格，轉而聚焦於問題本身不斷疊加層次，讓討論得以在有限時間內盡可能深入。\nPICI Method 的局限性 雖然盡快進入高知識密度的深度討論聽起來令人振奮，但這策略要能如願以償的發揮效果也是需要先判斷些前置條件的，否則可能會花更多時間在補足資訊落差上。幾個客觀的條件像是：\n對方需要具有對應的 Domain Knowledge 單刀直入地開始討論問題核心主要就是希望內行人講內行話，其他的開場白都是浪費時間，不過那些你所省略不講的鋪陳，必須要是對方本身就有相關經驗才行。\n如果目標團隊對於 SQL 的使用經驗有限的話，開場就討論如何用 Predicate Pushdown 來改善效能瓶頸可能會讓對方無法接話，不過這時面試官理應提問，藉此創造互動的話也相對流水帳好得多。\n這個問題在筆者認為不需要過於擔心，如果是在 Career Site 上的 Experienced Position 的話，都是由目標團隊或是相同性質的部門協助面試，不過仍可以先從 Job Description 和肉搜 Linkedin 大致了解對方的背景，預先準備可能需要進一步解釋的環節。\n在筆者的個人經驗中，如果團隊是特別專精某領域 (e.g. Data Warehousing, Developer Experience, Virtualization) 而不是單純交付功能的的產品團隊的話，Senior+ 的角色在對應的領域中都有能上檯面的水準，被電過幾次之後筆者相信費心思擔心對方會不會不懂這個或是沒聽過那個確實是有點多慮了。\n需要適時強調自己的產出 如果說在 STAR Method 中的主角是自己的話，在 PICI Method 中的主角變成了問題，如果沒有適當的強調自己的貢獻，可能進入單純對議題發表看法的狀態。\n即使到了 Tech Lead 或 Staff Engineer 的人生階段，分析與領導力可以是一個 candidate 亮眼的強項，但不能是全部。畢竟仍然有一定比例的 Individual Contributor 成分，靠譜的基本功和穩定的生產力還是必要的，一方面是能和團隊溝通想法，另一方面也是為了應對人力真空的不時之需。\n雖然最後有 Impact 的環節能夠發揮一番最終的量化成果，但 Challenge 的部分也能提些做過的嘗試與碰壁的過程，以自身視角敘述內容的話可以補足在執行力上的表現。\nPICI Method 面試中實際使用起來如何？ 由於是最近才整理好的框架，筆者也只使用在一場技術面試過而已，流水帳的疑慮明顯是解決了，非常快速的聚焦到深層次討論，不過也讓我意識到需要加減提一下自己的實體產出 (e.g. 效能提升、架構改善、功能開發)。\n另個收穫是在針對特定問題的深度討論中，自己過去的所有觀點與決策都會被放大檢視，畢竟範疇很小沒什麼發散討論或轉移話題的空間，對方興致來了就開始挑毛病，很多歷史舊業所導致的 Legacy 也都要想好一套說詞才行。\n","description":"","tags":["interview"],"title":"除了 STAR Method 以外，在技術面試中我們需要顧慮的其他面向","uri":"/posts/problem_insight_challenge_impact_framework/"},{"categories":null,"content":"Influencing organizations and products is always a popular topic in everyone’s daily workplace and career, especially in a large-scale firm or a complicated business.\nUnlike the feature requests or bug fixes, influencing has no specific directions, all we can rely on is usually a vague high-level objective, or even just an intuition that something needs to be improved.\nLeveraging is not only an exciting challenge in personal growth, also one of the keys to contribute to the growth of the team, promote virtuous circles and achieve excellence in the long-term.\nAs relatively experienced members, we will often be expected to share the responsibilities, carry out practical strategies and drive the solutions.\nBelow are some approaches from my experience while working as a Sr. SWE at Appier, hope these give you some inspiration :)\nRemove the Critical Blockers The day-to-day life of a software engineering team is not always smooth sailing. More precisely, we will encounter bottlenecks every now and then, not all of them are technical related, tight schedule and legacy architecture accounted for a large proportion.\nCountless components and logics intertwined with each other, we proceed cautiously, bypass the fragile parts and keep away from the magics which we do not familiar enough with.\nIdentifying and removing the critical blockers that the team greatly constrained by or suffer from often ameliorate team-wide workflow and decisions.\nIncluding but not limited to:\nMake everyone can deploy the specific version of service with just one click by establishing an artifacts management system and general deployment process.\nMake more modern classes and functions available to everyone by upgrading the deeply-adopted web framework.\nMake everyone can clarify the root cause of the error without studying the logs and records inside the database by integrating observability tools to expose the status and result of async tasks.\nLet everyone no longer need to waste time typing example inputs manually by designing the sample data generating tool.\nThe nature of the team-wide capacity is continuous and stable like a river, but it may take a turn while encountering obstacles like rocks, while the individuals is often more domain-specific and targeted.\nIn order to get the team on the right track, timely guide the way forward of the organization via outstanding personal skills well worth a try.\nMentoring \u0026 Sponsoring Earn the Credits Establish Standards for Reference Unfortunately, we can not adopt workarounds all the way, every anti-pattern and non-best-practice are increasing the organization’s debt.\n","description":"","tags":null,"title":"Applying Managerial Leverage to Software Engineering Teams","uri":"/posts/applying_managerial_leverage_to_software_engineering_teams/"}]